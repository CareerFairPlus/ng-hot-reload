var WebSocket = require('ws');
var clientTemplate = require('raw-loader!./client.tpl.js');
var wrapTemplate = require('raw-loader!./wrap.tpl.js');
var coreLib = require('raw-loader!ng-hot-reload-core');
var _ = require('lodash');

module.exports = function({
    start = true,
    port = 3100,
} = {}) {
    let wss;

    function startServer() {
        wss = new WebSocket.Server({ port });
    }

    function reload({ file, path }) {
        const message = wrap(false)(file, path);

        wss.clients.forEach(client => {
            if (client.readyState = WebSocket.OPEN) {
                client.send(message);
            }
        });
    }

    const clientOptions = {
        port,
        ns: 'ng-hot-reload-standalone',
    };

    const wrap = firstPass => (file, path) => {
        const options = _.assign({
            path,
            firstPass,
        }, clientOptions);

        return `
        ;// Generated by ng-hot-reload-standalone...
        (function(__ngHotReloadOptions) {
            ${wrapTemplate}  
        // ...Generated content ends.

            ${file}
        
        // Generated by ng-hot-reload-standalone...
            ;
        })(function(){
            var options = ${ JSON.stringify(options) };
            options.angular = ${ angular };
            return options;
        }());
        // Generated content ends.
        `;
    };

    const client =
        `;(function(options) {
            options.root = typeof window !== 'undefined' ? window : this;

            if (options.root) {
                if (options.root[options.ns]) return;
                else options.root[options.ns] = {};
            }

            ${clientTemplate}

            var module;
            var exports = options.root[options.ns];
            // Webpack's generated output for ng-hot-reload-core will load
            // the exports to options.root[options.ns]['ng-hot-reload-core']
            ${coreLib}

        })(${ JSON.stringify(clientOptions) });
        `;

    if (start) {
        startServer();
    }

    return {
        start: startServer,
        reload,
        client,
        wrap: wrap(true),
    };
};
